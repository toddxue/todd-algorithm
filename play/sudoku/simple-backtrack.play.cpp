#include "sudoku.h"

int main() {

    int M1[9][9] = 
        {
            {0, 9, 0,  0, 3, 4,  1, 0, 5},
            {0, 0, 6,  0, 2, 0,  0, 0, 8},
            {7, 0, 5,  0, 0, 6,  0, 0, 2},

            {0, 0, 1,  0, 8, 0,  0, 4, 0},
            {5, 0, 2,  0, 4, 0,  3, 0, 1},
            {0, 3, 0,  0, 1, 2,  5, 0, 0},

            {1, 0, 0,  2, 0, 0,  8, 0, 9},
            {8, 0, 0,  0, 7, 0,  6, 0, 0},
            {6, 0, 9,  4, 5, 0,  0, 1, 0},
        };

    int M2[9][9] = 
        {
            {8, 0, 3,  5, 0, 0,  0, 0, 0},
            {0, 0, 0,  2, 0, 9,  0, 1, 0},
            {0, 0, 6,  8, 0, 0,  3, 0, 0},

            {0, 3, 0,  0, 0, 0,  6, 5, 0},
            {0, 9, 0,  0, 4, 0,  0, 8, 0},
            {0, 5, 4,  0, 0, 0,  0, 2, 0},

            {0, 0, 9,  0, 0, 3,  2, 0, 0},
            {0, 8, 0,  4, 0, 2,  0, 0, 0},
            {0, 0, 0,  0, 0, 8,  1, 0, 9},
        };

    int M3[9][9] = 
        {
            {0, 8, 0,  6, 9, 0,  1, 0, 0},
            {6, 0, 0,  5, 0, 0,  9, 0, 0},
            {0, 0, 0,  0, 0, 0,  0, 0, 4},

            {0, 0, 0,  0, 0, 3,  6, 0, 5},
            {7, 3, 0,  0, 0, 0,  0, 9, 2},
            {5, 0, 2,  8, 0, 0,  0, 0, 0},

            {8, 0, 0,  0, 0, 0,  0, 0, 0},
            {0, 0, 4,  0, 0, 6,  0, 0, 7},
            {0, 0, 1,  0, 3, 4,  0, 8, 0},
        };

    /** 
     * from here: http://www.careercup.com/question?id=14995749
     * turns out to be faster since find one is just too easy
     */
    int M4[9][9] = 
        {
            {0, 0, 0,   0, 0, 0,   0, 0, 0}, 
            {0, 0, 8,   0, 0, 0,   0, 4, 0}, 
            {0, 0, 0,   0, 0, 0,   0, 0, 0}, 

            {0, 0, 0,   0, 0, 6,   0, 0, 0}, 
            {0, 0, 0,   0, 0, 0,   0, 0, 0}, 
            {0, 0, 0,   0, 0, 0,   0, 0, 0}, 

            {2, 0, 0,   0, 0, 0,   0, 0, 0}, 
            {0, 0, 0,   0, 0, 0,   0, 2, 0}, 
            {0, 0, 0,   0, 0, 0,   0, 0, 0}, 
        };

    for (int repeat = 400; repeat >= 0; --repeat) {
        int A[9][9];
        memcpy(A, M4, sizeof(A));
        if (sudoku::backtrack3(A)) {
            if (repeat == 0) {
                sudoku::print(A);
                int r,l;
                if (!sudoku::checkall(A, r, l)) {
                    fprintf(stderr, "internal error at (%d, %d)\n", r, l);
                    return 1;
                }
            }
        }
    }
    return 0;
}

/**
 * 
 * USING M3: (repeat = 400)
 * performance difference:
    >time ./simple-backtrack.play
    4   8   7   6   9   2   1   5   3  
    6   1   3   5   4   7   9   2   8  
    9   2   5   3   1   8   7   6   4  
    1   9   8   2   7   3   6   4   5  
    7   3   6   4   5   1   8   9   2  
    5   4   2   8   6   9   3   7   1  
    8   7   9   1   2   5   4   3   6  
    3   5   4   9   8   6   2   1   7  
    2   6   1   7   3   4   5   8   9  
   
    backtrack1: real0m1.606s
    backtrack2: real0m0.733s
    backtrack3: real0m0.409s
 *
 * the heuristic #3 optimization works, but that huge, still expoential algorithms
 *
 */
